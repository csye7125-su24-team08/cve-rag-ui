import streamlit as st
import requests
import re
import os
from dotenv import load_dotenv

st.title("ðŸ’¬ Vulnerability Expert")
st.caption("ðŸš€ A RAG chatbot powered by OpenAI")


def process_response(text):
    # Replace "\n" with actual line breaks
    text = text.replace("\\n", "\n")

    # Process headers
    text = re.sub(
        r"^(#+)\s*(.+)$",
        lambda m: f"{m.group(1)} {m.group(2)}",
        text,
        flags=re.MULTILINE,
    )

    # Process nested lists
    lines = text.split("\n")
    for i, line in enumerate(lines):
        if re.match(r"^[a-z]\)", line.strip()):
            lines[i] = f"   {line.strip()}"
    text = "\n".join(lines)

    # Remove extra spaces at the beginning of lines
    text = re.sub(r"\n\s+", "\n", text)

    return text


load_dotenv()

if "messages" not in st.session_state:
    st.session_state.messages = [
        {
            "role": "assistant",
            "content": "How can I help you with vulnerability assessments?",
        }
    ]

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(process_response(message["content"]))

if prompt := st.chat_input("Ask about vulnerabilities"):
    st.session_state.messages.append({"role": "user", "content": prompt})

    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        message_placeholder = st.empty()

        try:
            with st.spinner("Generating response..."):

                apiUrl = os.getenv("API_URL")
                print(apiUrl)
                response = requests.post(apiUrl, json={"decision": prompt})
                response.raise_for_status()
                recommendation = response.json()["recommendation"]

                # Process the full response
                full_response = process_response(recommendation)

            # Display the full response at once
            message_placeholder.markdown(full_response)
        except requests.exceptions.RequestException as e:
            st.error(f"An error occurred: {e}")
            full_response = "I apologize, but I encountered an error while processing your request. Please try again later."
            message_placeholder.markdown(full_response)

    st.session_state.messages.append({"role": "assistant", "content": full_response})

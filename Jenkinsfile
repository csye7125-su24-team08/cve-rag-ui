pipeline {
  agent any
  tools {
    nodejs 'node'
  }
  environment {
    GITHUB_CREDENTIALS = credentials('GITHUB_CREDENTIALS')
    webapp_registry = 'dongrep/cve-rag-ui'
    DOCKER_CREDENTIALS = credentials('DOCKER_CREDENTIALS')
  }
  stages {
    stage('Clone repository') {
      steps {
        cleanWs()
        checkout scm
      }
    }
    stage('Validate Conventional Commits') {
      steps {
        withEnv(["GITHUB_TOKEN=${GITHUB_CREDENTIALS_PSW}"]) {
          sh '''
          echo "Validate commit messages"

          npm i -D @semantic-release/commit-analyzer @semantic-release/exec
          npx semantic-release --dry-run
          '''
        }
      }
    }
    stage('Create Release Version') {
      when {
        branch 'main'
      }
      steps {
        withEnv(["GITHUB_TOKEN=${GITHUB_CREDENTIALS_PSW}"]) {
          sh '''
          npx semantic-release
          '''
          script {
            def newVersion = readFile('version.txt').trim()
            echo "New version: ${newVersion}"
            env.NEW_VERSION = newVersion
          }
        }
      }
    }
    stage('Build and Push Image CVE RAG UI') {
      when {
        branch 'main'
      }
      steps {
        script {
          // Login to Docker Hub
          echo 'Login to Docker Hub'
          sh 'echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin'

          // Create a builder instance if not exists
          echo 'Ensure buildx builder instance'
          sh '''
              docker buildx create --use --name mybuilder || true
              docker buildx inspect mybuilder --bootstrap || true
          '''

          // Build and push multi-architecture image
          echo 'Build and push multi-architecture image'
          sh """
              docker buildx build --platform linux/amd64,linux/arm64 \
                  --progress=plain \
                  --cache-from=type=registry,ref=${webapp_registry}:cache \
                  --cache-to=type=inline \
                  -t ${webapp_registry}:${NEW_VERSION} \
                  -t ${webapp_registry}:latest \
                  -f ./Dockerfile \
                  --push .
          """
        }
      }
    }
  }
  post {
    always {
      sh 'docker system prune -a -f'
      sh 'docker logout'
    }
  }
}
